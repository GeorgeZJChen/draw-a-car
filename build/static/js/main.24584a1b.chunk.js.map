{"version":3,"sources":["js/params.js","js/draw.js","js/input.js","js/model.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["PARAMS","Draw","this","context","refs","element","getContext","_this","react_default","a","createElement","width","IMG_WIDTH","height","className","ref","onMouseDown","e","fillStyle","fillRect","canvas","beginPath","ele","pos","offsetLeft","offsetTop","parentNode","document","body","basicDraw","container","containerPos","idInterval","RL","RT","_this2","x","pageX","changedTouches","y","pageY","moved","move","mx","my","Math","abs","computePosition","scrollTop","scrollLeft","moveTo","setInterval","stroke","lineTo","tm","preventDefault","up","removeEventListener","passive","clearInterval","addEventListener","Component","sketch","colour","Object","classCallCheck","c","tagName","drawImage","console","log","data","getImageData","contour","Uint8Array","ArrayBuffer","j","i","length","t_colour","t_contour","Float32Array","tf","Model","load","feed","Input","getInput","print","output","model","execute","input","getElementById","cb","loadFrozenModel","then","v","err","App","initContour","alert","draw","run","pickedColour","img","Image","src","onload","window","timestart","Date","getTime","logo","alt","style","position","id","marginRight","onClick","clear","onChange","pickColour","defaultChecked","type","name","backgroundColor","marginLeft","generate","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.24584a1b.chunk.js","sourcesContent":["const PARAMS = {}\r\n\r\nPARAMS.IMG_WIDTH = 256\r\n\r\nexport default PARAMS\r\n","import React, { Component } from 'react';\r\nimport PARAMS from './params.js'\r\nimport '../App.css';\r\n\r\nclass Draw extends Component {\r\n  componentDidMount(){\r\n    this.context = this.refs.element.getContext('2d')\r\n\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <canvas width={PARAMS.IMG_WIDTH} height={PARAMS.IMG_WIDTH} className='draw' ref='element'\r\n        onMouseDown={(e)=>{this.onMouseDown(e)}}\r\n      ></canvas>\r\n    )\r\n  }\r\n  clear(){\r\n    this.context.fillStyle = 'white'\r\n    this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n    this.context.beginPath();\r\n  }\r\n  computePosition(ele){\r\n    const pos = [0,0]\r\n    do{\r\n      pos[0] += ele.offsetLeft\r\n      pos[1] += ele.offsetTop\r\n      ele = ele.parentNode\r\n    }while(ele!=document.body)\r\n    return pos\r\n  }\r\n  onMouseDown(e){\r\n    this.basicDraw(e)\r\n  }\r\n  basicDraw(e){\r\n    const x = e.pageX || (e.changedTouches?e.changedTouches[0].pageX:0)\r\n    const y = e.pageY || (e.changedTouches?e.changedTouches[0].pageY:0)\r\n\r\n    let container\r\n    let containerPos\r\n    let idInterval\r\n    let RL\r\n    let RT\r\n\r\n    let moved = false\r\n    const move = (e)=>{\r\n      let mx = e.pageX || (e.changedTouches?e.changedTouches[0].pageX:0)\r\n      let my = e.pageY || (e.changedTouches?e.changedTouches[0].pageY:0)\r\n      if(!moved&&Math.abs(my-y)<4&&Math.abs(mx-x)<4) return\r\n      if(!moved){\r\n        moved = true\r\n        container = this.refs.element\r\n        containerPos = this.computePosition(container)\r\n        RT = containerPos[1] - container.scrollTop\r\n        RL = containerPos[0] - container.scrollLeft\r\n\r\n        this.context.moveTo(x - RL, y - RT)\r\n        idInterval = setInterval(()=>{\r\n          this.context.stroke()\r\n        },30)\r\n      }\r\n      this.context.lineTo(mx - RL, my - RT)\r\n\r\n    }\r\n    const tm = function(e){e.preventDefault()}\r\n    const up = (e)=>{\r\n      document.removeEventListener('touchmove', tm, {passive: false})\r\n      document.removeEventListener('mousemove', move, false)\r\n      document.removeEventListener('mouseup', up, false)\r\n      document.removeEventListener(\"touchmove\", move, false)\r\n      document.removeEventListener(\"touchend\", up, false)\r\n      document.removeEventListener(\"touchcancel\", up, false)\r\n      if(moved){\r\n        clearInterval(idInterval)\r\n        this.context.stroke()\r\n      }\r\n    }\r\n    document.addEventListener('touchmove', tm, {passive: false})\r\n    document.addEventListener('mousemove', move, false)\r\n    document.addEventListener('mouseup', up, false)\r\n    document.addEventListener(\"touchmove\", move, false)\r\n    document.addEventListener(\"touchend\", up, false)\r\n    document.addEventListener(\"touchcancel\", up, false)\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Draw\r\n","import * as tf from '@tensorflow/tfjs'\r\nimport PARAMS from './params.js'\r\n\r\nclass sketch{\r\n\r\n  constructor(sketch, colour){\r\n\r\n    const IMG_WIDTH = PARAMS.IMG_WIDTH\r\n\r\n    let c\r\n    if(sketch.tagName===\"IMAGE\"){\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = IMG_WIDTH\r\n      canvas.height = IMG_WIDTH\r\n      c = canvas.getContext(\"2d\")\r\n      c.drawImage(sketch, 0, 0)\r\n      console.log('img');\r\n    }\r\n    else if (sketch.tagName===\"CANVAS\") {\r\n      c = sketch.getContext('2d')\r\n      console.log('canvas');\r\n    }\r\n    const data = c.getImageData(0, 0, IMG_WIDTH, IMG_WIDTH).data\r\n    const fix = (num)=>{\r\n      if(num>128) return 0\r\n      return 2\r\n    }\r\n    const contour =  new Uint8Array(new ArrayBuffer(IMG_WIDTH * IMG_WIDTH), 0, IMG_WIDTH * IMG_WIDTH)\r\n    let j = 0\r\n    for (let i = 0; i < data.length; i+=4) {\r\n      contour[j++] = fix(data[i])\r\n    }\r\n\r\n    this.contour = contour\r\n    this.colour = colour || [255,255,255]\r\n\r\n  }\r\n\r\n  getInput(){\r\n    const t_colour = this.colour\r\n    t_colour[0] = t_colour[0] /255 *2 -1\r\n    t_colour[1] = t_colour[1] /255 *2 -1\r\n    t_colour[2] = t_colour[2] /255 *2 -1\r\n\r\n    const t_contour = this.contour\r\n    const IMG_WIDTH = PARAMS.IMG_WIDTH\r\n    const data =  new Float32Array(new ArrayBuffer(IMG_WIDTH * IMG_WIDTH * 4 * 4), 0, IMG_WIDTH * IMG_WIDTH * 4)\r\n    let j = 0\r\n    for (let i = 0; i < data.length; i+=4) {\r\n      data[i] = t_colour[0]\r\n      data[i+1] = t_colour[1]\r\n      data[i+2] = t_colour[2]\r\n      data[i+3] = t_contour[j++]-1\r\n    }\r\n    return tf.tensor(data, [1, IMG_WIDTH, IMG_WIDTH, 4])\r\n  }\r\n}\r\n\r\nexport default sketch\r\n","import Input from './input.js'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport {loadFrozenModel} from '@tensorflow/tfjs-converter';\r\n\r\n\r\nclass Model{\r\n  constructor(){\r\n\r\n    this.load(()=>{\r\n      console.log('Model loaded');\r\n    })\r\n\r\n  }\r\n  run(feed){\r\n    const data = new Input(feed.sketch, feed.colour).getInput()\r\n    data.print()\r\n    const output = this.model.execute({input: data})\r\n    tf.toPixels(tf.reshape(tf.cast(output, 'int32'), [256,256,3]), document.getElementById('123456'))\r\n  }\r\n\r\n  load(cb){\r\n    const MODEL_URL = 'static/model/JS_MODEL_1/tensorflowjs_model.pb';\r\n    const WEIGHTS_URL = 'static/model/JS_MODEL_1/weights_manifest.json';\r\n\r\n    loadFrozenModel(MODEL_URL, WEIGHTS_URL).then((v)=> {\r\n\r\n      this.model = v\r\n      cb()\r\n\r\n    }, function(err) {\r\n      console.log(err); // failure\r\n    })\r\n  }\r\n}\r\n\r\nexport default Model\r\n","import React, { Component } from 'react';\nimport * as tf from '@tensorflow/tfjs'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport PARAMS from './js/params.js'\nimport Draw from './js/draw.js'\nimport Model from './js/model.js'\n\nclass App extends Component {\n  componentDidMount(){\n    this.model = new Model()\n    this.initContour()\n  }\n  generate(){\n    if(!this.model) return alert('Model not loaded')\n\n    const input = this.refs.draw.refs.element\n    this.model.run({ sketch: input, colour: this.pickedColour||[58,60,200] })\n  }\n  pickColour(colour){\n    console.log(colour);\n    this.pickedColour = colour\n  }\n  initContour(){\n\n    const IMAGE_URL = 'static/img/1234.jpg'\n    const img = new Image(256,256)\n    img.src = IMAGE_URL\n    img.onload = ()=>{\n\n      window.timestart = new Date().getTime()\n\n      const IMG_WIDTH = PARAMS.IMG_WIDTH\n      const canvas = document.createElement('canvas')\n      canvas.width = IMG_WIDTH\n      canvas.height = IMG_WIDTH\n      const c = canvas.getContext(\"2d\")\n      c.drawImage(img, 0, 0)\n\n      const data = c.getImageData(0, 0, IMG_WIDTH, IMG_WIDTH).data\n\n      const fix = (num)=>{\n        if(num>128) return 255\n        return 0\n      }\n      const contour =  new Uint8Array(new ArrayBuffer(IMG_WIDTH * IMG_WIDTH), 0, IMG_WIDTH * IMG_WIDTH)\n      let j = 0\n      for (let i = 0; i < data.length; i+=4) {\n        contour[j++] = fix(data[i])\n      }\n\n      tf.toPixels(tf.reshape(tf.cast(contour, 'int32'), [256,256,1]), this.refs.draw.refs.element)\n\n      console.log('elapsed: '+(new Date().getTime()-window.timestart))\n    }\n\n\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <span style={{position: 'relative'}}>\n            <Draw ref='draw'/>\n            <canvas id='123456' width={256} height={256} className='display'></canvas>\n          </span>\n          <div style={{\n            position: 'relative'\n          }}>\n            <button style={{\n              marginRight: 6,\n              width: 75\n            }} onClick={()=>{this.refs.draw.clear()}}>CLEAR</button>\n\n            <input className='pick-colour' onChange={()=>{this.pickColour([20,20,200])}} defaultChecked type='radio' name='pick-colour'/>\n            <span className='colour-radio' style={{backgroundColor:'rgb(20, 20, 200)'}}></span>\n            <input className='pick-colour' onChange={()=>{this.pickColour([200,20,20])}} type='radio' name='pick-colour'/>\n            <span className='colour-radio' style={{backgroundColor:'rgb(200, 20, 20)'}}></span>\n            <input className='pick-colour' onChange={()=>{this.pickColour([250,250,250])}} type='radio' name='pick-colour'/>\n            <span className='colour-radio' style={{backgroundColor:'rgb(250, 250, 250)'}}></span>\n            <input className='pick-colour' onChange={()=>{this.pickColour([150,150,150])}} type='radio' name='pick-colour'/>\n            <span className='colour-radio' style={{backgroundColor:'rgb(150, 150, 150)'}}></span>\n            <input className='pick-colour' onChange={()=>{this.pickColour([20,20,20])}} type='radio' name='pick-colour'/>\n            <span className='colour-radio' style={{backgroundColor:'rgb(20, 20, 20)'}}></span>\n\n            <button style={{\n              marginLeft: 10,\n              width: 50\n            }} onClick={()=>{this.generate()}}>GO</button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}